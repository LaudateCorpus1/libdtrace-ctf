1.2.0 (not yet released)
-----

The codebase is now in GNU style.  All files have been renmaed and/or
moved around: upstream consumers can now include <sys/ctf-api.h> if
they want to, or remain with the old <cys/ctf_api.h> if they prefer.

<sys/ctf_types.h> (containing some obsolescent types used by some
consumers, and a single macro) is no longer used by the libdtrace-ctf
codebase.  It is still installed for compatibility, but you are encouraged
to migrate away from it.

One field in the public API, ctf_lblinfo_t.ctb_typeidx, has been renamed
for clarity to ctf_lblinfo_t.ctb_type (it is not an index: it is a type
ID).  CTF labels have no known users, so this should not disturb your code.

Files generated by libdtrace-ctf on platforms of the opposite endianness
can now be read and used if they were generated on the local system.  (As
with version upgrades, this is implemented by flipping the endianness of
the entire file aggressively at open time: cross-endian files thus take a
little longer to open, and -- if stored uncompressed -- consume a little
more memory than native-endian files.)

The internal implementation of the hashtables used by libdtrace-ctf has
changed.  As a consequence, libdtrace-ctf now depends on glib 2.x.

It is no longer necessary to call ctf_update() between calls to ctf_add_*()
to make types added by previous ctf_add_*() calls visible to later calls
to those functions.  (It still needs to be called before other operations,
including ctf_type_*(), iteration functions, and CTF writeout).  Since
ctf_update() is very expensive, this can result in a huge runtime reduction
for programs doing batch type addition.

All ctf_id_t arguments to ctf_add_*() functions are now validated to ensure
they are existing types.

You can now change the encoding of an existing type using ctf_add_slice().
A slice changes the encoding (bitness and offset) of some underlying int,
float, or enum type, but otherwise appears identical at read-time, except
that ctf_type_reference() will return the original int / float / enum.
(Calling ctf_type_reference() on these types was an error before now, so
this should affect no existing callers).  The error ECTF_NOTINTFP, raised
if you try to find out the encoding of a type that does not support it, has
changed meaning slightly to include enums as well, now that they support
encodings too.

The convenience function ctf_add_enum_encoded() allows the addition of an
enumerated type with a particular encoding: under the covers, it adds the
specified enum, if not already present, then creates and hands back a slice
to it.

The convenience function ctf_add_member_encoded() is like
ctf_add_member_offset() but takes an encoding and emits a new slice.  (It
does not look to see if an identical slice already exists, so callers that
care about such things probably want to call ctf_add_slice() directly.)

The new function ctf_type_aname() is like ctf_type_name() and ctf_type_lname()
except that it returns the new type name in a dynamically-allocated string that
the caller must free, and never truncates it.

The new function ctf_simple_open() is useful if you want to pass in buffers
to ctf_bufopen() without having to mock up an entire ctf_symtab.


1.1.0
-----

Add ctf_add_struct_sized() and ctf_add_union_sized(), allowing callers
to specify a size for structs and unions which is larger than the size
computed by aligning the last element.  This is useful if the compiler
adds extra padding beyond that which would be added by the last element
alone.

Fix a bug causing the heap to be mprotect()ed if a CTF section was passed
in to ctf_bufopen() containing contents generated by libdtrace-ctf 1.0.0
or above.
[Bug introduced in 1.0.0]

Work around some very minor CTF-generation bugs seen in CTF in the wild,
converting a few type conflict errors into silent continued operation.

ctf_dump now shows the size of each type.

1.0.0
-----

CTF format v2, boosting the number of types from 32767*2 to 2^31*2, the
number of struct and union members and enumerated values from 2^10 to
2^25, and the number of type kinds to 64 (for future expansion).

The ABI is unchanged, and v1 CTF files will be transparently upgraded to
v2 at open time, with unchanged type IDs.  Newly-created files will have
type IDs in child containers starting at 0x80000000 (printf()s should use
%lx or %lu, not %i, to avoid spuriously negatively-signed type IDs).

We do not support using v1 files as the parent of v2 files, nor vice versa,
and it is unlikely to work well.

Changes likely to be of interest only to people using the API to directly access
CTF files without going through the library:

API changes, limit constants:
 - CTF_MAX_TYPE, CTF_MAX_PTYPE, CTF_MAX_VLEN, CTF_MAX_SIZE,
   CTF_MAX_LSIZE_SENT, CTF_LSTRUCT_THRESH now relate to v2 limits, not v1
 - CTF_MAX_TYPE_V1, CTF_MAX_PTYPE_V1, CTF_MAX_VLEN_V1, CTF_MAX_SIZE_V1,
   CTF_MAX_LSIZE_SENT_V1, CTF_LSTRUCT_THRESH_V1: New.
 - CTF_MAX_LSIZE, CTF_MAX_INTOFF, CTF_MAX_INTBITS: Removed (unused).
 - CTF_K_MAX is boosted to 63 from 31.

API changes, file format accessors:
 - CTF_INFO_KIND, CTF_INFO_ISROOT, CTF_INFO_VLEN: Replaced with
   CTF_V1_INFO_* and CTF_V2_INFO_*.
 - CTF_TYPE_TO_INDEX / CTF_INDEX_TO_TYPE: Replaced with CTF_V1_* and CTF_V2_*.
 - CTF_TYPE_INFO: relates to v2 now.  No v1 equivalent.
 - CTF_TYPE_ISPARENT / CTF_TYPE_ISCHILD: replaced with ctf_type_isparent() /
   ctf_type_ischild() functions.

API changes, structure changes:
  - struct ctf_stype, ctf_stype, ctf_array now relate to v2, not v1
  - struct ctf_stype_v1, ctf_type_v1, ctf_array_v1: New.
  - struct ctf_lmember, ctf_member: Removed, replaced with _v1 and _v2
    variants: the typedef persists, now relating to v2, not v1.
  - The vlen for CTF_K_FUNCTION, CTF_K_ARRAY, CTF_K_STRUCT and CTF_K_UNION
    has changed.
  - Threshold changes mean that some types will be placed into ctf_stype
    and some members into ctf_member where previously ctf_type and
    ctf_lmember were needed.

ctf_ar now extracts CTF data from CTF archives without recompressing or changing
it.  It supports a -u option to force opening and recompressing: note that this
will upgrade CTFv1 data to v2 in the process.

0.8.1
-----

Fix bug causing loss of all types in a CTF container if the container has
a parent and ctf_rollback() is called.  (Only the types since the last
ctf_snapshot() should be removed, not every type.)

0.8.0
-----

Support for ARM64.

A new #define is provided, CTF_CHAR, which can be used to produce a char type
with the same signedness as the system's native char type.

0.7.0
-----

Support creation and use of "CTF archives" that contain any number of CTF files
in an efficient, endian-independent, mmap()able representation.  A new tool,
ctf_ar, supports listing and extraction of CTF files from these archives,
for debugging.

libdtrace-ctf now supports not only reading compressed archives but also their
creation, through the new function ctf_compress_write().

0.6.0
-----

Support multiple types with the same name where only one is a root type better
(as seen in the definition of bitfields).  This introduces additional error
checking which may break situations in which multiple root types with the same
name but different definitions.  All such situations are undefined: previously,
libdtrace-ctf would have returned either the last such type defined or a random
one depending on which API function was used.

0.5.0
-----

libdtrace-ctf is now compatible with big-endian systems (like SPARC).

0.4.3
-----

A pair of new functions, ctf_snapshot() and ctf_rollback(), provide type-
and-variable discarding functionality like that ctf_discard() did, but
without the expense of calling ctf_update() to get a point to discard to.

0.4.2
-----

The build system is now compatible with GNU Make 4.0.

0.4.1
-----

A bug causing reads of unintialized memory is fixed.

ctf_dump is much more useful, dumping information on structure and union members
recursively, and supporting a couple of extra flags that may be useful when
driving ctf_dump from another process.

0.4.0
-----

ctf_dump, a new CTF dumping tool, is introduced.  It is meant for debugging,
so it is built by default, but not installed.

A new function for iterating over variables stored in a CTF file,
ctf_variable_iter(), is introduced.  Iteration fails immediately if
this is a child CTF file with no associated parent.

0.3.3
-----

A failed ctf_lookup_by_id() of a type which should have been found in a parent
container now sets the errno on the CTF file on which the lookup was initiated,
rather than mistakenly setting it on its parent.

0.3.2
-----

CTF sections are now named .ctf by default, not .dtrace_ctf: this package is
not dependent on DTrace.

0.3
---

First release.
